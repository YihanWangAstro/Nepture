#include "SpaceHub/src/spaceHub.hpp"
#include "SpaceHub/src/taskflow/taskflow.hpp"
using namespace hub;
using namespace unit;
using namespace callback;
using namespace force;
using namespace orbit;
using f = Interactions<NewtonianGrav>;
using Solver = methods::DefaultMethod<f>;
using Particle = Solver::Particle;

// Q_max: max closest approach
double calc_max_impact_parameter(double Q_max, double v_inf, double M_tot) {
    return Q_max * sqrt(1 + 2 * M_tot / v_inf / v_inf / Q_max);
}

void job(size_t id, double inits[12][24]) {
    double* init = inits[id];

    double coll_R = 1.1_Rs;
    Particle star{1_Ms, init[0], init[1], init[2], init[3], init[4], init[5]};
    Particle jupiter1{1_Mj, init[6], init[7], init[8], init[9], init[10], init[11]};
    Particle jupiter2{1_Mj, init[12], init[13], init[14], init[15], init[16], init[17]};
    Particle neptune{17.147_Me, init[18], init[19], init[20], init[21], init[22], init[23]};

    move_to_COM_frame(star, jupiter1, jupiter2, neptune);

    Solver long_sim{0, star, jupiter1, jupiter2, neptune};

    Solver::RunArgs long_args;

    long_args.add_stop_condition(1e8_year);

    int event_tag = 0;

    auto stop_check = [&](auto& ptc, auto h) -> bool {
        auto [a, e] = calc_a_e(ptc.mass(0) + ptc.mass(1), ptc.pos(0) - ptc.pos(1), ptc.vel(0) - ptc.vel(1));

        auto [aj2, ej2] = calc_a_e(ptc.mass(0) + ptc.mass(2), ptc.pos(0) - ptc.pos(2), ptc.vel(0) - ptc.vel(2));

        auto [an, en] = calc_a_e(ptc.mass(0) + ptc.mass(3), ptc.pos(0) - ptc.pos(3), ptc.vel(0) - ptc.vel(3));

        if (a < 0 || aj2 < 0 || an < 0) {  // planet ejection
            event_tag = 3;
            return true;
        }

        if (0 < a && a * (1 - e) <= coll_R) {  // collision
            event_tag = 2;
            return true;
        }

        if (0 < a && a * (1 - e) <= 0.05_AU && e < 0.1) {  // hot jupiter candidate
            event_tag = 1;
            return true;
        }
        return false;
    };

    long_args.add_stop_condition(StepSlice(stop_check, 1000));

    long_args.add_operation(StepSlice(DefaultWriter("trajectories_" + std::to_string(id) + ".txt"), 1000));

    long_args.add_operation(StepSlice(EnergyErrWriter("trajectories_" + std::to_string(id) + ".err"), 1000));

    long_sim.run(long_args);
}
double inits[12][24] = {
    {-0.01115028245988015,   -0.008068544819110457,  -0.001268078390921801, -0.0003039327252135002,
     -0.0001296678711878501, 1.355869539026219e-05,  -4.334918978017527,    2.502504409356732,
     -0.07072944720943042,   0.2244363757966792,     0.3864695048390951,    -0.01381140441592701,
     13.9155053598314,       5.264584801917863,      0.9018886249770048,    0.09061224826259956,
     -0.2427403052207386,    -0.0005040067376003597, 38.97693007522582,     12.73967226073177,
     9.22191285774909,       0.06340735870733138,    -0.1456636935740953,   0.002005457781754017},
    {0.003922224829125298, -0.001189034271760647, 0.01210236863613545, -0.0001747565053282253, 3.475765858602931e-05,
     0.00057031523354425,  4.862515914477967,     -1.181571967215746,  0.06145369168706338,    0.02454199837745052,
     0.08352210634543257,  -0.4382982274099771,   -9.973692099515688,  2.14926483271438,       -10.9635969056954,
     0.1541015716477085,   -0.1250029837791637,   -0.1655125549755482, 18.55890927397456,      5.15635480163877,
     -32.97321236941792,   0.08287443367800743,   0.09379547238467063, 0.1152332161149214},
    {0.01264851202256523,   0.01087150556327288,  0.001325065440369144, -2.885845636675308e-05, 0.0005491448128515505,
     2.445209810257067e-06, -4.59539396854791,    1.925229646369928,    -0.3272142778053535,    -0.1722572281364411,
     -0.4122070531795372,   0.009707869279055207, -9.819672927103966,   -11.387934260409,       -1.058668724592223,
     0.1949175544576358,    -0.1671541533144499,  -0.01113381668869418, 21.52852067284698,      -35.74779532495302,
     -0.04744939156591954,  0.1404574488323403,   0.07322481360107015,  -0.021058470536403},
    {0.007059934673179669,   -0.01690808717489745,   -0.007545205192229787, -0.0005823503364845196,
     -0.0001386016778154465, -0.0002777482527529709, -1.470303312215719,    4.73598347718422,
     0.4712024245235966,     0.3593829392256027,     0.08630771349622732,   0.2510126715083076,
     -3.917955251654234,     12.59961263396406,      7.191997942485102,     0.2479216586205379,
     0.05140661922148291,    0.04468148957538046,    -37.24103490637833,    7.065155158542609,
     4.501706707993833,      0.05373854182627023,    0.1393124120406125,    -0.08639084011175324},
    {0.0128579594893381,    -0.001834908085470488, -0.01089649528103109, 0.0001548572582465678, -0.000492231646473283,
     0.0004034394265337356, -4.877784341492656,    -0.7663329796876042,  0.692270937836895,     -0.09242519038143218,
     0.2880236099328308,    -0.3288530785535444,   -10.13574126397725,   0.9143381446306194,    11.02940811327596,
     -0.07359318789983334,  0.2311415379383194,    -0.08740873213295575, 28.55272909164148,     32.89140736245804,
     -5.634399330527799,    0.06958197084967614,   -0.06283208751070644, -0.1199894993309442},
    {0.006117485261938782,  0.003844677860740831, -0.006549853628712299, 8.42973940338651e-06, 0.000573847684674425,
     7.014196042425501e-05, -2.099228774771063,   1.454747920099152,     -4.305292080998584,   -0.1713918272812179,
     -0.4089806303172145,   -0.05422907292882341, -5.440316361446776,    -5.469776348163066,   12.74185679707074,
     0.1623705079088807,    -0.2018122459920378,  -0.01675863851270915,  20.9332719973745,     -0.2509461401461692,
     -29.16176750013204,    0.003491530185705149, 0.1760369745743764,    -0.046503848046555},
    {0.01054209948244988,   -0.01388346779522465,  0.0004831119690038577, -0.0003361373410996835, -0.000485663689187787,
     5.143962216216415e-06, -4.843905879066142,    1.184552746910597,     -0.05394453555061318,   0.107030351056986,
     0.43370784287444,      -0.009073705691872921, -4.006154032360882,    14.43681600330859,      0.1585274889335437,
     0.2485161006017829,    0.06871334361318514,   0.003579177198863886,  -40.70528945766205,     -19.90269958654164,
     -11.32051723998904,    -0.06174933324294281,  0.1199461806692809,    0.001937366544399514},
    {0.007200757917985356,   0.01646717342174497,  0.003964747699740201, -0.0003432957123667563, 0.0003748401245769225,
     -0.0004112534120161299, -2.211327151176647,   -3.440270989414159,   -2.829933506019245,     0.2032219630360173,
     -0.3224428013765643,    0.2344700991620945,   -6.584143859939445,   -13.4666838637967,      0.2361718241427297,
     0.1589472145513836,     -0.07505595577981791, 0.188766250793593,    23.17291087693377,      -6.446840885249998,
     -28.92429239856926,     -0.04547606587509851, 0.08766657247896609,  0.142474551407068},
    {-0.01004809584742361,  0.007948121490471749, 0.00833382015235884, 0.0001229194938393539, -0.0003540198378624306,
     -6.76036404622278e-05, 2.314877309266421,    3.86762561496775,    -2.158260851364787,    -0.3632850969848863,
     0.2531877956668229,    0.06207264422986179,  6.23948265223089,    -12.20967091328973,    -6.207685956213879,
     0.2323261719680537,    0.11071480970878,     0.01149714549886463, 36.59203752668134,     0.2551404188042738,
     -6.792266311460423,    0.04003697379198803,  0.130662851142874,   -0.05064701637794204},
    {0.0005317936235087473,  0.007308347402727122, -0.008049032064747053, 0.0002200487116988878, 4.016873249156148e-05,
     -0.0004036544119624204, 3.984243267801276,    -2.880609591606969,    -0.9111476553225941,   -0.1037767282214128,
     -0.2539507546474905,    0.3526532026704381,   -5.494861802289051,    -7.232308957072007,    12.00619565833667,
     -0.1302122729849791,    0.2121302775494614,   0.06576037249508324,   17.66997822031055,     45.50086872316143,
     -49.31917521812035,     0.06330030392293631,  -0.004995257137526645, 0.08428409709785618},
    {0.01069116851772378,    -0.004383569009277721, 0.01141158611227411, 0.0005552907625112173, 0.000254526094256597,
     -0.0002000101769836001, -1.193723942234101,    1.789561130019734,   -4.496305099297956,    -0.4101759469792097,
     -0.1727056180140041,    0.04063223922154243,   -11.14693154774477,  3.873585305278311,     -9.21331901447735,
     -0.1723339456412447,    -0.101099592171193,    0.1647279564283398,  21.09393119185086,     -19.82959102578334,
     32.47545156169986,      0.01222575649009507,   0.1316861055656725,  0.07814692724453862},
    {-0.00496297440440685,   -4.759410445842605e-05, 0.01191004168157406,  0.0005547151281396663,
     -0.0001380547213256666, -0.0002597983626320254, 3.193973268697505,    0.02216805869183247,
     3.855648684288099,      -0.3395950633559141,    0.06725862892495767,  0.2823864224699607,
     1.56680638271655,       1.752277862891901,      -14.77650752180818,   -0.2449665279600491,
     0.08165247711488981,    -0.01646960514213223,   8.146985252561308,    -31.96302917394783,
     -28.89128753837377,     0.06143064847382551,    -0.07882902698713477, 0.116905390017075}};

int main(int argc, char** argv) {
    tf::Executor executor;

    for (size_t i = 0; i < 12; ++i) {
        executor.silent_async(job, i, inits);
    }
    executor.wait_for_all();  // wait all jobs to be finished
    return 0;
}
